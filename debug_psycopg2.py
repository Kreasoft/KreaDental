#!/usr/bin/env python
"""
Script para debuggear espec√≠ficamente psycopg2
"""
import os
import sys
import subprocess

def verificar_version_psycopg2():
    """Verifica la versi√≥n de psycopg2"""
    print("üîç Verificando versi√≥n de psycopg2...")
    try:
        import psycopg2
        print(f"‚úÖ psycopg2 versi√≥n: {psycopg2.__version__}")
        return True
    except Exception as e:
        print(f"‚ùå Error importando psycopg2: {e}")
        return False

def probar_conexion_con_diferentes_encodings():
    """Prueba la conexi√≥n con diferentes encodings"""
    print("\nüîç Probando conexi√≥n con diferentes encodings...")
    
    try:
        import psycopg2
        
        # Probar con diferentes configuraciones de encoding
        configuraciones = [
            {'host': 'localhost', 'database': 'postgres', 'user': 'postgres', 'password': 'postgres', 'port': '5432'},
            {'host': '127.0.0.1', 'database': 'postgres', 'user': 'postgres', 'password': 'postgres', 'port': '5432'},
            {'host': 'localhost', 'database': 'postgres', 'user': 'postgres', 'password': 'postgres', 'port': '5432', 'client_encoding': 'UTF8'},
            {'host': 'localhost', 'database': 'postgres', 'user': 'postgres', 'password': 'postgres', 'port': '5432', 'client_encoding': 'LATIN1'},
        ]
        
        for i, config in enumerate(configuraciones):
            try:
                print(f"  Probando configuraci√≥n {i+1}: {config}")
                conn = psycopg2.connect(**config)
                print(f"  ‚úÖ Configuraci√≥n {i+1} exitosa")
                conn.close()
                return True
            except Exception as e:
                print(f"  ‚ùå Configuraci√≥n {i+1} fall√≥: {e}")
        
        return False
    except Exception as e:
        print(f"‚ùå Error en psycopg2: {e}")
        return False

def verificar_configuracion_postgresql():
    """Verifica la configuraci√≥n de PostgreSQL"""
    print("\nüîç Verificando configuraci√≥n de PostgreSQL...")
    
    try:
        # Verificar configuraci√≥n de PostgreSQL
        result = subprocess.run(['psql', '--version'], capture_output=True, text=True, encoding='utf-8')
        if result.returncode == 0:
            print(f"‚úÖ PostgreSQL versi√≥n: {result.stdout.strip()}")
        else:
            print(f"‚ùå Error obteniendo versi√≥n de PostgreSQL: {result.stderr}")
            return False
        
        # Verificar configuraci√≥n de encoding
        result = subprocess.run(['psql', '-U', 'postgres', '-c', 'SHOW client_encoding;'], capture_output=True, text=True, encoding='utf-8')
        if result.returncode == 0:
            print(f"‚úÖ Client encoding: {result.stdout.strip()}")
        else:
            print(f"‚ùå Error obteniendo client encoding: {result.stderr}")
        
        # Verificar configuraci√≥n de server encoding
        result = subprocess.run(['psql', '-U', 'postgres', '-c', 'SHOW server_encoding;'], capture_output=True, text=True, encoding='utf-8')
        if result.returncode == 0:
            print(f"‚úÖ Server encoding: {result.stdout.strip()}")
        else:
            print(f"‚ùå Error obteniendo server encoding: {result.stderr}")
        
        return True
    except Exception as e:
        print(f"‚ùå Error verificando configuraci√≥n: {e}")
        return False

def probar_conexion_con_dsn():
    """Prueba la conexi√≥n usando DSN"""
    print("\nüîç Probando conexi√≥n con DSN...")
    
    try:
        import psycopg2
        
        # Probar con DSN string
        dsn_strings = [
            "host=localhost dbname=postgres user=postgres password=postgres port=5432",
            "host=127.0.0.1 dbname=postgres user=postgres password=postgres port=5432",
            "host=localhost dbname=postgres user=postgres password=postgres port=5432 client_encoding=UTF8",
        ]
        
        for i, dsn in enumerate(dsn_strings):
            try:
                print(f"  Probando DSN {i+1}: {dsn}")
                conn = psycopg2.connect(dsn)
                print(f"  ‚úÖ DSN {i+1} exitoso")
                conn.close()
                return True
            except Exception as e:
                print(f"  ‚ùå DSN {i+1} fall√≥: {e}")
        
        return False
    except Exception as e:
        print(f"‚ùå Error probando DSN: {e}")
        return False

def verificar_variables_entorno():
    """Verifica las variables de entorno"""
    print("\nüîç Verificando variables de entorno...")
    
    variables = ['PGHOST', 'PGPORT', 'PGUSER', 'PGPASSWORD', 'PGDATABASE', 'PGCLIENTENCODING']
    
    for var in variables:
        value = os.environ.get(var, 'No definida')
        print(f"  {var}: {value}")
    
    return True

def main():
    """Funci√≥n principal de debug"""
    print("üöÄ Iniciando debug espec√≠fico de psycopg2...")
    
    # Paso 1: Verificar versi√≥n de psycopg2
    if not verificar_version_psycopg2():
        print("‚ùå No se puede importar psycopg2")
        return
    
    # Paso 2: Verificar variables de entorno
    verificar_variables_entorno()
    
    # Paso 3: Verificar configuraci√≥n de PostgreSQL
    verificar_configuracion_postgresql()
    
    # Paso 4: Probar conexi√≥n con diferentes encodings
    if probar_conexion_con_diferentes_encodings():
        print("\nüéâ ¬°Se encontr√≥ una configuraci√≥n que funciona!")
        return
    
    # Paso 5: Probar conexi√≥n con DSN
    if probar_conexion_con_dsn():
        print("\nüéâ ¬°Se encontr√≥ una configuraci√≥n DSN que funciona!")
        return
    
    print("\n‚ùå No se encontr√≥ ninguna configuraci√≥n que funcione")
    print("\nüìã Posibles soluciones:")
    print("1. Reinstalar psycopg2: pip uninstall psycopg2-binary && pip install psycopg2-binary")
    print("2. Verificar configuraci√≥n de PostgreSQL")
    print("3. Usar una versi√≥n diferente de psycopg2")

if __name__ == "__main__":
    main()

"""
Script para debuggear espec√≠ficamente psycopg2
"""
import os
import sys
import subprocess

def verificar_version_psycopg2():
    """Verifica la versi√≥n de psycopg2"""
    print("üîç Verificando versi√≥n de psycopg2...")
    try:
        import psycopg2
        print(f"‚úÖ psycopg2 versi√≥n: {psycopg2.__version__}")
        return True
    except Exception as e:
        print(f"‚ùå Error importando psycopg2: {e}")
        return False

def probar_conexion_con_diferentes_encodings():
    """Prueba la conexi√≥n con diferentes encodings"""
    print("\nüîç Probando conexi√≥n con diferentes encodings...")
    
    try:
        import psycopg2
        
        # Probar con diferentes configuraciones de encoding
        configuraciones = [
            {'host': 'localhost', 'database': 'postgres', 'user': 'postgres', 'password': 'postgres', 'port': '5432'},
            {'host': '127.0.0.1', 'database': 'postgres', 'user': 'postgres', 'password': 'postgres', 'port': '5432'},
            {'host': 'localhost', 'database': 'postgres', 'user': 'postgres', 'password': 'postgres', 'port': '5432', 'client_encoding': 'UTF8'},
            {'host': 'localhost', 'database': 'postgres', 'user': 'postgres', 'password': 'postgres', 'port': '5432', 'client_encoding': 'LATIN1'},
        ]
        
        for i, config in enumerate(configuraciones):
            try:
                print(f"  Probando configuraci√≥n {i+1}: {config}")
                conn = psycopg2.connect(**config)
                print(f"  ‚úÖ Configuraci√≥n {i+1} exitosa")
                conn.close()
                return True
            except Exception as e:
                print(f"  ‚ùå Configuraci√≥n {i+1} fall√≥: {e}")
        
        return False
    except Exception as e:
        print(f"‚ùå Error en psycopg2: {e}")
        return False

def verificar_configuracion_postgresql():
    """Verifica la configuraci√≥n de PostgreSQL"""
    print("\nüîç Verificando configuraci√≥n de PostgreSQL...")
    
    try:
        # Verificar configuraci√≥n de PostgreSQL
        result = subprocess.run(['psql', '--version'], capture_output=True, text=True, encoding='utf-8')
        if result.returncode == 0:
            print(f"‚úÖ PostgreSQL versi√≥n: {result.stdout.strip()}")
        else:
            print(f"‚ùå Error obteniendo versi√≥n de PostgreSQL: {result.stderr}")
            return False
        
        # Verificar configuraci√≥n de encoding
        result = subprocess.run(['psql', '-U', 'postgres', '-c', 'SHOW client_encoding;'], capture_output=True, text=True, encoding='utf-8')
        if result.returncode == 0:
            print(f"‚úÖ Client encoding: {result.stdout.strip()}")
        else:
            print(f"‚ùå Error obteniendo client encoding: {result.stderr}")
        
        # Verificar configuraci√≥n de server encoding
        result = subprocess.run(['psql', '-U', 'postgres', '-c', 'SHOW server_encoding;'], capture_output=True, text=True, encoding='utf-8')
        if result.returncode == 0:
            print(f"‚úÖ Server encoding: {result.stdout.strip()}")
        else:
            print(f"‚ùå Error obteniendo server encoding: {result.stderr}")
        
        return True
    except Exception as e:
        print(f"‚ùå Error verificando configuraci√≥n: {e}")
        return False

def probar_conexion_con_dsn():
    """Prueba la conexi√≥n usando DSN"""
    print("\nüîç Probando conexi√≥n con DSN...")
    
    try:
        import psycopg2
        
        # Probar con DSN string
        dsn_strings = [
            "host=localhost dbname=postgres user=postgres password=postgres port=5432",
            "host=127.0.0.1 dbname=postgres user=postgres password=postgres port=5432",
            "host=localhost dbname=postgres user=postgres password=postgres port=5432 client_encoding=UTF8",
        ]
        
        for i, dsn in enumerate(dsn_strings):
            try:
                print(f"  Probando DSN {i+1}: {dsn}")
                conn = psycopg2.connect(dsn)
                print(f"  ‚úÖ DSN {i+1} exitoso")
                conn.close()
                return True
            except Exception as e:
                print(f"  ‚ùå DSN {i+1} fall√≥: {e}")
        
        return False
    except Exception as e:
        print(f"‚ùå Error probando DSN: {e}")
        return False

def verificar_variables_entorno():
    """Verifica las variables de entorno"""
    print("\nüîç Verificando variables de entorno...")
    
    variables = ['PGHOST', 'PGPORT', 'PGUSER', 'PGPASSWORD', 'PGDATABASE', 'PGCLIENTENCODING']
    
    for var in variables:
        value = os.environ.get(var, 'No definida')
        print(f"  {var}: {value}")
    
    return True

def main():
    """Funci√≥n principal de debug"""
    print("üöÄ Iniciando debug espec√≠fico de psycopg2...")
    
    # Paso 1: Verificar versi√≥n de psycopg2
    if not verificar_version_psycopg2():
        print("‚ùå No se puede importar psycopg2")
        return
    
    # Paso 2: Verificar variables de entorno
    verificar_variables_entorno()
    
    # Paso 3: Verificar configuraci√≥n de PostgreSQL
    verificar_configuracion_postgresql()
    
    # Paso 4: Probar conexi√≥n con diferentes encodings
    if probar_conexion_con_diferentes_encodings():
        print("\nüéâ ¬°Se encontr√≥ una configuraci√≥n que funciona!")
        return
    
    # Paso 5: Probar conexi√≥n con DSN
    if probar_conexion_con_dsn():
        print("\nüéâ ¬°Se encontr√≥ una configuraci√≥n DSN que funciona!")
        return
    
    print("\n‚ùå No se encontr√≥ ninguna configuraci√≥n que funcione")
    print("\nüìã Posibles soluciones:")
    print("1. Reinstalar psycopg2: pip uninstall psycopg2-binary && pip install psycopg2-binary")
    print("2. Verificar configuraci√≥n de PostgreSQL")
    print("3. Usar una versi√≥n diferente de psycopg2")

if __name__ == "__main__":
    main()




