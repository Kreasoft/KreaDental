#!/usr/bin/env python
"""
Script para debuggear el problema de PostgreSQL
"""
import os
import sys
import subprocess
import psycopg2
from pathlib import Path

def probar_conexion_directa():
    """Prueba la conexi√≥n directa a PostgreSQL"""
    print("üîç Probando conexi√≥n directa a PostgreSQL...")
    
    try:
        # Probar conexi√≥n b√°sica
        conn = psycopg2.connect(
            host='localhost',
            database='postgres',
            user='postgres',
            password='postgres',
            port='5432'
        )
        print("‚úÖ Conexi√≥n b√°sica a PostgreSQL exitosa")
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå Error en conexi√≥n b√°sica: {e}")
        return False

def probar_conexion_base_especifica():
    """Prueba la conexi√≥n a la base de datos espec√≠fica"""
    print("\nüîç Probando conexi√≥n a base de datos espec√≠fica...")
    
    try:
        # Probar conexi√≥n a kreadental_final
        conn = psycopg2.connect(
            host='localhost',
            database='kreadental_final',
            user='postgres',
            password='postgres',
            port='5432'
        )
        print("‚úÖ Conexi√≥n a kreadental_final exitosa")
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå Error en conexi√≥n a kreadental_final: {e}")
        return False

def probar_conexion_con_encoding():
    """Prueba la conexi√≥n con diferentes encodings"""
    print("\nüîç Probando conexi√≥n con diferentes encodings...")
    
    configuraciones = [
        {'host': 'localhost', 'database': 'kreadental_final', 'user': 'postgres', 'password': 'postgres', 'port': '5432'},
        {'host': '127.0.0.1', 'database': 'kreadental_final', 'user': 'postgres', 'password': 'postgres', 'port': '5432'},
        {'host': 'localhost', 'database': 'kreadental_final', 'user': 'postgres', 'password': 'postgres', 'port': '5432', 'client_encoding': 'UTF8'},
    ]
    
    for i, config in enumerate(configuraciones):
        try:
            print(f"  Probando configuraci√≥n {i+1}: {config}")
            conn = psycopg2.connect(**config)
            print(f"  ‚úÖ Configuraci√≥n {i+1} exitosa")
            conn.close()
            return True
        except Exception as e:
            print(f"  ‚ùå Configuraci√≥n {i+1} fall√≥: {e}")
    
    return False

def verificar_datos_problematicos():
    """Verifica si hay datos problem√°ticos en el archivo de exportaci√≥n"""
    print("\nüîç Verificando datos problem√°ticos...")
    
    if os.path.exists('datos_exportados.json'):
        try:
            with open('datos_exportados.json', 'r', encoding='utf-8') as f:
                content = f.read()
                print(f"‚úÖ Archivo datos_exportados.json le√≠do correctamente ({len(content)} caracteres)")
                
                # Buscar caracteres problem√°ticos
                problematic_chars = []
                for i, char in enumerate(content):
                    if ord(char) > 127:  # Caracteres no ASCII
                        problematic_chars.append((i, char, ord(char)))
                        if len(problematic_chars) > 10:  # Limitar a 10 ejemplos
                            break
                
                if problematic_chars:
                    print("‚ö†Ô∏è Caracteres no ASCII encontrados:")
                    for pos, char, code in problematic_chars:
                        print(f"  Posici√≥n {pos}: '{char}' (c√≥digo {code})")
                else:
                    print("‚úÖ No se encontraron caracteres problem√°ticos")
                
                return True
        except Exception as e:
            print(f"‚ùå Error leyendo datos_exportados.json: {e}")
            return False
    else:
        print("‚ùå Archivo datos_exportados.json no encontrado")
        return False

def probar_django_con_diferentes_configs():
    """Prueba Django con diferentes configuraciones"""
    print("\nüîç Probando Django con diferentes configuraciones...")
    
    configuraciones = [
        {
            'name': 'localhost',
            'config': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'kreadental_final',
                'USER': 'postgres',
                'PASSWORD': 'postgres',
                'HOST': 'localhost',
                'PORT': '5432',
            }
        },
        {
            'name': '127.0.0.1',
            'config': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'kreadental_final',
                'USER': 'postgres',
                'PASSWORD': 'postgres',
                'HOST': '127.0.0.1',
                'PORT': '5432',
            }
        },
        {
            'name': 'con_encoding',
            'config': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'kreadental_final',
                'USER': 'postgres',
                'PASSWORD': 'postgres',
                'HOST': 'localhost',
                'PORT': '5432',
                'OPTIONS': {
                    'client_encoding': 'UTF8',
                },
            }
        }
    ]
    
    for config_info in configuraciones:
        print(f"\n  Probando configuraci√≥n: {config_info['name']}")
        try:
            # Cambiar configuraci√≥n temporalmente
            settings_file = "config/settings.py"
            with open(settings_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Crear configuraci√≥n temporal
            temp_config = f"""# Database
DATABASES = {{
    'default': {config_info['config']}
}}"""
            
            # Reemplazar configuraci√≥n
            old_config = """# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}"""
            
            content = content.replace(old_config, temp_config)
            
            with open(settings_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # Probar comando
            result = subprocess.run(['python', 'manage.py', 'check'], capture_output=True, text=True, encoding='utf-8')
            if result.returncode == 0:
                print(f"  ‚úÖ Configuraci√≥n {config_info['name']} exitosa")
                return True
            else:
                print(f"  ‚ùå Configuraci√≥n {config_info['name']} fall√≥: {result.stderr}")
                
        except Exception as e:
            print(f"  ‚ùå Error probando configuraci√≥n {config_info['name']}: {e}")
    
    return False

def main():
    """Funci√≥n principal de debug"""
    print("üöÄ Iniciando debug de PostgreSQL...")
    
    # Paso 1: Probar conexi√≥n directa
    if not probar_conexion_directa():
        print("‚ùå No se puede conectar a PostgreSQL b√°sico")
        return
    
    # Paso 2: Probar conexi√≥n a base espec√≠fica
    if not probar_conexion_base_especifica():
        print("‚ùå No se puede conectar a la base de datos espec√≠fica")
        return
    
    # Paso 3: Probar con diferentes encodings
    if not probar_conexion_con_encoding():
        print("‚ùå No se puede conectar con ning√∫n encoding")
        return
    
    # Paso 4: Verificar datos problem√°ticos
    verificar_datos_problematicos()
    
    # Paso 5: Probar Django con diferentes configuraciones
    if probar_django_con_diferentes_configs():
        print("\nüéâ ¬°Se encontr√≥ una configuraci√≥n que funciona!")
    else:
        print("\n‚ùå Ninguna configuraci√≥n de Django funciona")
    
    print("\nüìã Resumen del debug completado")

if __name__ == "__main__":
    main()

"""
Script para debuggear el problema de PostgreSQL
"""
import os
import sys
import subprocess
import psycopg2
from pathlib import Path

def probar_conexion_directa():
    """Prueba la conexi√≥n directa a PostgreSQL"""
    print("üîç Probando conexi√≥n directa a PostgreSQL...")
    
    try:
        # Probar conexi√≥n b√°sica
        conn = psycopg2.connect(
            host='localhost',
            database='postgres',
            user='postgres',
            password='postgres',
            port='5432'
        )
        print("‚úÖ Conexi√≥n b√°sica a PostgreSQL exitosa")
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå Error en conexi√≥n b√°sica: {e}")
        return False

def probar_conexion_base_especifica():
    """Prueba la conexi√≥n a la base de datos espec√≠fica"""
    print("\nüîç Probando conexi√≥n a base de datos espec√≠fica...")
    
    try:
        # Probar conexi√≥n a kreadental_final
        conn = psycopg2.connect(
            host='localhost',
            database='kreadental_final',
            user='postgres',
            password='postgres',
            port='5432'
        )
        print("‚úÖ Conexi√≥n a kreadental_final exitosa")
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå Error en conexi√≥n a kreadental_final: {e}")
        return False

def probar_conexion_con_encoding():
    """Prueba la conexi√≥n con diferentes encodings"""
    print("\nüîç Probando conexi√≥n con diferentes encodings...")
    
    configuraciones = [
        {'host': 'localhost', 'database': 'kreadental_final', 'user': 'postgres', 'password': 'postgres', 'port': '5432'},
        {'host': '127.0.0.1', 'database': 'kreadental_final', 'user': 'postgres', 'password': 'postgres', 'port': '5432'},
        {'host': 'localhost', 'database': 'kreadental_final', 'user': 'postgres', 'password': 'postgres', 'port': '5432', 'client_encoding': 'UTF8'},
    ]
    
    for i, config in enumerate(configuraciones):
        try:
            print(f"  Probando configuraci√≥n {i+1}: {config}")
            conn = psycopg2.connect(**config)
            print(f"  ‚úÖ Configuraci√≥n {i+1} exitosa")
            conn.close()
            return True
        except Exception as e:
            print(f"  ‚ùå Configuraci√≥n {i+1} fall√≥: {e}")
    
    return False

def verificar_datos_problematicos():
    """Verifica si hay datos problem√°ticos en el archivo de exportaci√≥n"""
    print("\nüîç Verificando datos problem√°ticos...")
    
    if os.path.exists('datos_exportados.json'):
        try:
            with open('datos_exportados.json', 'r', encoding='utf-8') as f:
                content = f.read()
                print(f"‚úÖ Archivo datos_exportados.json le√≠do correctamente ({len(content)} caracteres)")
                
                # Buscar caracteres problem√°ticos
                problematic_chars = []
                for i, char in enumerate(content):
                    if ord(char) > 127:  # Caracteres no ASCII
                        problematic_chars.append((i, char, ord(char)))
                        if len(problematic_chars) > 10:  # Limitar a 10 ejemplos
                            break
                
                if problematic_chars:
                    print("‚ö†Ô∏è Caracteres no ASCII encontrados:")
                    for pos, char, code in problematic_chars:
                        print(f"  Posici√≥n {pos}: '{char}' (c√≥digo {code})")
                else:
                    print("‚úÖ No se encontraron caracteres problem√°ticos")
                
                return True
        except Exception as e:
            print(f"‚ùå Error leyendo datos_exportados.json: {e}")
            return False
    else:
        print("‚ùå Archivo datos_exportados.json no encontrado")
        return False

def probar_django_con_diferentes_configs():
    """Prueba Django con diferentes configuraciones"""
    print("\nüîç Probando Django con diferentes configuraciones...")
    
    configuraciones = [
        {
            'name': 'localhost',
            'config': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'kreadental_final',
                'USER': 'postgres',
                'PASSWORD': 'postgres',
                'HOST': 'localhost',
                'PORT': '5432',
            }
        },
        {
            'name': '127.0.0.1',
            'config': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'kreadental_final',
                'USER': 'postgres',
                'PASSWORD': 'postgres',
                'HOST': '127.0.0.1',
                'PORT': '5432',
            }
        },
        {
            'name': 'con_encoding',
            'config': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'kreadental_final',
                'USER': 'postgres',
                'PASSWORD': 'postgres',
                'HOST': 'localhost',
                'PORT': '5432',
                'OPTIONS': {
                    'client_encoding': 'UTF8',
                },
            }
        }
    ]
    
    for config_info in configuraciones:
        print(f"\n  Probando configuraci√≥n: {config_info['name']}")
        try:
            # Cambiar configuraci√≥n temporalmente
            settings_file = "config/settings.py"
            with open(settings_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Crear configuraci√≥n temporal
            temp_config = f"""# Database
DATABASES = {{
    'default': {config_info['config']}
}}"""
            
            # Reemplazar configuraci√≥n
            old_config = """# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}"""
            
            content = content.replace(old_config, temp_config)
            
            with open(settings_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # Probar comando
            result = subprocess.run(['python', 'manage.py', 'check'], capture_output=True, text=True, encoding='utf-8')
            if result.returncode == 0:
                print(f"  ‚úÖ Configuraci√≥n {config_info['name']} exitosa")
                return True
            else:
                print(f"  ‚ùå Configuraci√≥n {config_info['name']} fall√≥: {result.stderr}")
                
        except Exception as e:
            print(f"  ‚ùå Error probando configuraci√≥n {config_info['name']}: {e}")
    
    return False

def main():
    """Funci√≥n principal de debug"""
    print("üöÄ Iniciando debug de PostgreSQL...")
    
    # Paso 1: Probar conexi√≥n directa
    if not probar_conexion_directa():
        print("‚ùå No se puede conectar a PostgreSQL b√°sico")
        return
    
    # Paso 2: Probar conexi√≥n a base espec√≠fica
    if not probar_conexion_base_especifica():
        print("‚ùå No se puede conectar a la base de datos espec√≠fica")
        return
    
    # Paso 3: Probar con diferentes encodings
    if not probar_conexion_con_encoding():
        print("‚ùå No se puede conectar con ning√∫n encoding")
        return
    
    # Paso 4: Verificar datos problem√°ticos
    verificar_datos_problematicos()
    
    # Paso 5: Probar Django con diferentes configuraciones
    if probar_django_con_diferentes_configs():
        print("\nüéâ ¬°Se encontr√≥ una configuraci√≥n que funciona!")
    else:
        print("\n‚ùå Ninguna configuraci√≥n de Django funciona")
    
    print("\nüìã Resumen del debug completado")

if __name__ == "__main__":
    main()




