#!/usr/bin/env python
"""
Script para configurar PATH de PostgreSQL en la sesi√≥n actual
"""

import os
import subprocess

def configurar_path_sesion():
    """Configurar PATH para la sesi√≥n actual"""
    print("üõ†Ô∏è  Configurando PATH de PostgreSQL para esta sesi√≥n...")
    
    # Ruta de PostgreSQL
    postgresql_bin = "C:\\Program Files\\PostgreSQL\\17\\bin"
    
    if os.path.exists(postgresql_bin):
        print(f"‚úÖ Ruta encontrada: {postgresql_bin}")
        
        # Agregar al PATH de la sesi√≥n actual
        current_path = os.environ.get('PATH', '')
        if postgresql_bin not in current_path:
            os.environ['PATH'] = postgresql_bin + ';' + current_path
            print("‚úÖ PATH configurado para esta sesi√≥n")
        else:
            print("‚úÖ PATH ya contiene PostgreSQL")
        
        return True
    else:
        print(f"‚ùå Ruta no encontrada: {postgresql_bin}")
        return False

def verificar_psql():
    """Verificar que psql est√© disponible"""
    print("üîç Verificando psql...")
    
    try:
        result = subprocess.run(
            'psql --version',
            shell=True,
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print(f"‚úÖ psql funcionando: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå psql no responde")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando psql: {e}")
        return False

def iniciar_servicio_postgresql():
    """Intentar iniciar el servicio de PostgreSQL"""
    print("üöÄ Intentando iniciar servicio de PostgreSQL...")
    
    try:
        # Iniciar servicio
        result = subprocess.run(
            'net start postgresql-x64-17',
            shell=True,
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ Servicio iniciado exitosamente")
            return True
        else:
            print(f"‚ö†Ô∏è  Error iniciando servicio: {result.stderr}")
            print("   El servicio puede estar ya ejecut√°ndose")
            return True  # Continuar aunque haya error
            
    except Exception as e:
        print(f"‚ùå Error iniciando servicio: {e}")
        return False

def verificar_conexion_postgresql():
    """Verificar conexi√≥n a PostgreSQL"""
    print("üîó Verificando conexi√≥n a PostgreSQL...")
    
    try:
        # Intentar conectar a la base de datos por defecto
        result = subprocess.run(
            'psql -U postgres -d postgres -c "SELECT version();"',
            shell=True,
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ Conexi√≥n exitosa a PostgreSQL")
            print(f"   üìä {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå Error de conexi√≥n: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando conexi√≥n: {e}")
        return False

def mostrar_instrucciones_conexion():
    """Mostrar instrucciones para conectar"""
    print("\nüìã INSTRUCCIONES DE CONEXI√ìN")
    print("=" * 40)
    print("Si hay problemas de conexi√≥n:")
    print("1. Verificar que el servicio est√© ejecut√°ndose")
    print("2. Verificar la contrase√±a del usuario 'postgres'")
    print("3. Verificar que el puerto 5432 est√© disponible")
    print("4. Intentar conectar manualmente:")
    print("   psql -U postgres -h localhost -p 5432")

def main():
    """Funci√≥n principal"""
    print("üîß CONFIGURADOR DE PATH DE POSTGRESQL")
    print("=" * 40)
    print("KreaDental Cloud - Sistema de Gesti√≥n Dental")
    print("=" * 40)
    
    # Configurar PATH
    if not configurar_path_sesion():
        print("\n‚ùå No se pudo configurar el PATH")
        return False
    
    # Verificar psql
    if not verificar_psql():
        print("\n‚ùå psql no est√° disponible")
        return False
    
    # Iniciar servicio
    if not iniciar_servicio_postgresql():
        print("\n‚ö†Ô∏è  No se pudo iniciar el servicio")
        print("   Continuando con la verificaci√≥n...")
    
    # Verificar conexi√≥n
    if verificar_conexion_postgresql():
        print("\nüéâ PostgreSQL est√° funcionando correctamente")
        print("   Puedes continuar con la migraci√≥n")
        return True
    else:
        print("\n‚ö†Ô∏è  PostgreSQL no responde correctamente")
        mostrar_instrucciones_conexion()
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüìù Pr√≥ximos pasos:")
        print("1. python verificar_sistema.py")
        print("2. python migrate_to_postgresql.py")
    else:
        print("\n‚ùå Hay problemas que resolver antes de continuar")


"""
Script para configurar PATH de PostgreSQL en la sesi√≥n actual
"""

import os
import subprocess

def configurar_path_sesion():
    """Configurar PATH para la sesi√≥n actual"""
    print("üõ†Ô∏è  Configurando PATH de PostgreSQL para esta sesi√≥n...")
    
    # Ruta de PostgreSQL
    postgresql_bin = "C:\\Program Files\\PostgreSQL\\17\\bin"
    
    if os.path.exists(postgresql_bin):
        print(f"‚úÖ Ruta encontrada: {postgresql_bin}")
        
        # Agregar al PATH de la sesi√≥n actual
        current_path = os.environ.get('PATH', '')
        if postgresql_bin not in current_path:
            os.environ['PATH'] = postgresql_bin + ';' + current_path
            print("‚úÖ PATH configurado para esta sesi√≥n")
        else:
            print("‚úÖ PATH ya contiene PostgreSQL")
        
        return True
    else:
        print(f"‚ùå Ruta no encontrada: {postgresql_bin}")
        return False

def verificar_psql():
    """Verificar que psql est√© disponible"""
    print("üîç Verificando psql...")
    
    try:
        result = subprocess.run(
            'psql --version',
            shell=True,
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print(f"‚úÖ psql funcionando: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå psql no responde")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando psql: {e}")
        return False

def iniciar_servicio_postgresql():
    """Intentar iniciar el servicio de PostgreSQL"""
    print("üöÄ Intentando iniciar servicio de PostgreSQL...")
    
    try:
        # Iniciar servicio
        result = subprocess.run(
            'net start postgresql-x64-17',
            shell=True,
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ Servicio iniciado exitosamente")
            return True
        else:
            print(f"‚ö†Ô∏è  Error iniciando servicio: {result.stderr}")
            print("   El servicio puede estar ya ejecut√°ndose")
            return True  # Continuar aunque haya error
            
    except Exception as e:
        print(f"‚ùå Error iniciando servicio: {e}")
        return False

def verificar_conexion_postgresql():
    """Verificar conexi√≥n a PostgreSQL"""
    print("üîó Verificando conexi√≥n a PostgreSQL...")
    
    try:
        # Intentar conectar a la base de datos por defecto
        result = subprocess.run(
            'psql -U postgres -d postgres -c "SELECT version();"',
            shell=True,
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ Conexi√≥n exitosa a PostgreSQL")
            print(f"   üìä {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå Error de conexi√≥n: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando conexi√≥n: {e}")
        return False

def mostrar_instrucciones_conexion():
    """Mostrar instrucciones para conectar"""
    print("\nüìã INSTRUCCIONES DE CONEXI√ìN")
    print("=" * 40)
    print("Si hay problemas de conexi√≥n:")
    print("1. Verificar que el servicio est√© ejecut√°ndose")
    print("2. Verificar la contrase√±a del usuario 'postgres'")
    print("3. Verificar que el puerto 5432 est√© disponible")
    print("4. Intentar conectar manualmente:")
    print("   psql -U postgres -h localhost -p 5432")

def main():
    """Funci√≥n principal"""
    print("üîß CONFIGURADOR DE PATH DE POSTGRESQL")
    print("=" * 40)
    print("KreaDental Cloud - Sistema de Gesti√≥n Dental")
    print("=" * 40)
    
    # Configurar PATH
    if not configurar_path_sesion():
        print("\n‚ùå No se pudo configurar el PATH")
        return False
    
    # Verificar psql
    if not verificar_psql():
        print("\n‚ùå psql no est√° disponible")
        return False
    
    # Iniciar servicio
    if not iniciar_servicio_postgresql():
        print("\n‚ö†Ô∏è  No se pudo iniciar el servicio")
        print("   Continuando con la verificaci√≥n...")
    
    # Verificar conexi√≥n
    if verificar_conexion_postgresql():
        print("\nüéâ PostgreSQL est√° funcionando correctamente")
        print("   Puedes continuar con la migraci√≥n")
        return True
    else:
        print("\n‚ö†Ô∏è  PostgreSQL no responde correctamente")
        mostrar_instrucciones_conexion()
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüìù Pr√≥ximos pasos:")
        print("1. python verificar_sistema.py")
        print("2. python migrate_to_postgresql.py")
    else:
        print("\n‚ùå Hay problemas que resolver antes de continuar")











