#!/usr/bin/env python
"""
Script simplificado para probar PostgreSQL
"""

import os
import subprocess

def configurar_path():
    """Configurar PATH para PostgreSQL"""
    postgresql_bin = "C:\\Program Files\\PostgreSQL\\17\\bin"
    if os.path.exists(postgresql_bin):
        current_path = os.environ.get('PATH', '')
        if postgresql_bin not in current_path:
            os.environ['PATH'] = postgresql_bin + ';' + current_path
        return True
    return False

def probar_psql():
    """Probar psql"""
    print("üîç Probando psql...")
    try:
        result = subprocess.run('psql --version', shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ psql funcionando: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå psql no funciona")
            return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def probar_conexion():
    """Probar conexi√≥n a PostgreSQL"""
    print("üîó Probando conexi√≥n a PostgreSQL...")
    
    # Solicitar contrase√±a
    password = input("Ingresa la contrase√±a del usuario 'postgres': ")
    
    if not password:
        print("‚ùå No se ingres√≥ contrase√±a")
        return False
    
    try:
        # Configurar contrase√±a
        env = os.environ.copy()
        env['PGPASSWORD'] = password
        
        # Probar conexi√≥n
        result = subprocess.run(
            'psql -U postgres -d postgres -c "SELECT version();"',
            shell=True,
            capture_output=True,
            text=True,
            env=env
        )
        
        if result.returncode == 0:
            print("‚úÖ Conexi√≥n exitosa a PostgreSQL")
            print(f"üìä {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå Error de conexi√≥n: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üêò PROBADOR DE POSTGRESQL")
    print("=" * 30)
    
    # Configurar PATH
    if not configurar_path():
        print("‚ùå No se pudo configurar PATH")
        return False
    
    # Probar psql
    if not probar_psql():
        print("‚ùå psql no est√° disponible")
        return False
    
    # Probar conexi√≥n
    if probar_conexion():
        print("\nüéâ PostgreSQL est√° funcionando correctamente")
        print("   Puedes continuar con la migraci√≥n")
        return True
    else:
        print("\n‚ùå Hay problemas con PostgreSQL")
        return False

if __name__ == "__main__":
    main()


"""
Script simplificado para probar PostgreSQL
"""

import os
import subprocess

def configurar_path():
    """Configurar PATH para PostgreSQL"""
    postgresql_bin = "C:\\Program Files\\PostgreSQL\\17\\bin"
    if os.path.exists(postgresql_bin):
        current_path = os.environ.get('PATH', '')
        if postgresql_bin not in current_path:
            os.environ['PATH'] = postgresql_bin + ';' + current_path
        return True
    return False

def probar_psql():
    """Probar psql"""
    print("üîç Probando psql...")
    try:
        result = subprocess.run('psql --version', shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ psql funcionando: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå psql no funciona")
            return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def probar_conexion():
    """Probar conexi√≥n a PostgreSQL"""
    print("üîó Probando conexi√≥n a PostgreSQL...")
    
    # Solicitar contrase√±a
    password = input("Ingresa la contrase√±a del usuario 'postgres': ")
    
    if not password:
        print("‚ùå No se ingres√≥ contrase√±a")
        return False
    
    try:
        # Configurar contrase√±a
        env = os.environ.copy()
        env['PGPASSWORD'] = password
        
        # Probar conexi√≥n
        result = subprocess.run(
            'psql -U postgres -d postgres -c "SELECT version();"',
            shell=True,
            capture_output=True,
            text=True,
            env=env
        )
        
        if result.returncode == 0:
            print("‚úÖ Conexi√≥n exitosa a PostgreSQL")
            print(f"üìä {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå Error de conexi√≥n: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üêò PROBADOR DE POSTGRESQL")
    print("=" * 30)
    
    # Configurar PATH
    if not configurar_path():
        print("‚ùå No se pudo configurar PATH")
        return False
    
    # Probar psql
    if not probar_psql():
        print("‚ùå psql no est√° disponible")
        return False
    
    # Probar conexi√≥n
    if probar_conexion():
        print("\nüéâ PostgreSQL est√° funcionando correctamente")
        print("   Puedes continuar con la migraci√≥n")
        return True
    else:
        print("\n‚ùå Hay problemas con PostgreSQL")
        return False

if __name__ == "__main__":
    main()







